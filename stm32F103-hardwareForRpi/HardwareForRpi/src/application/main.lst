   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"main.c"
  23              	.Ltext0:
  24              		.file 1 "main.c"
 19121              		.align	1
 19122              		.global	delayMs
 19123              		.thumb
 19124              		.thumb_func
 19126              	delayMs:
 19127              	.LFB27:
   0:main.c        **** #include <stdlib.h>
   1:main.c        **** #include <string.h>
   2:main.c        **** #include "global.h"
   3:main.c        **** 
   4:main.c        **** void delayMs(uint32_t msec) {
 19128              		.loc 1 5 0
 19129              		@ args = 0, pretend = 0, frame = 0
 19130              		@ frame_needed = 0, uses_anonymous_args = 0
 19131              		@ link register save eliminated.
 19132              	.LVL0:
   5:main.c        **** 	uint32_t tmp = 7000 * msec;
 19133              		.loc 1 6 0
 19134 0000 41F65833 		movw	r3, #7000
 19135              	.LVL1:
 19136 0004 5843     		muls	r0, r3, r0
 19137              	.LVL2:
   6:main.c        **** 	while (tmp--)
 19138              		.loc 1 7 0
 19139 0006 01E0     		b	.L2
 19140              	.LVL3:
 19141              	.L3:
 19142              	.LBB6:
 19143              	.LBB7:
   0:./../libcmsis/core_cm3.h **** /******************************************************************************
   1:./../libcmsis/core_cm3.h ****  * @file:    core_cm3.h
   2:./../libcmsis/core_cm3.h ****  * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   3:./../libcmsis/core_cm3.h ****  * @version: V1.20
   4:./../libcmsis/core_cm3.h ****  * @date:    22. May 2009
   5:./../libcmsis/core_cm3.h ****  *----------------------------------------------------------------------------
   6:./../libcmsis/core_cm3.h ****  *
   7:./../libcmsis/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   8:./../libcmsis/core_cm3.h ****  *
   9:./../libcmsis/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
  10:./../libcmsis/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  11:./../libcmsis/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  12:./../libcmsis/core_cm3.h ****  *
  13:./../libcmsis/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  14:./../libcmsis/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  15:./../libcmsis/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  16:./../libcmsis/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  17:./../libcmsis/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  18:./../libcmsis/core_cm3.h ****  *
  19:./../libcmsis/core_cm3.h ****  ******************************************************************************/
  20:./../libcmsis/core_cm3.h **** 
  21:./../libcmsis/core_cm3.h **** #ifndef __CM3_CORE_H__
  22:./../libcmsis/core_cm3.h **** #define __CM3_CORE_H__
  23:./../libcmsis/core_cm3.h **** 
  24:./../libcmsis/core_cm3.h **** #ifdef __cplusplus
  25:./../libcmsis/core_cm3.h ****  extern "C" {
  26:./../libcmsis/core_cm3.h **** #endif 
  27:./../libcmsis/core_cm3.h **** 
  28:./../libcmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  29:./../libcmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!<
  30:./../libcmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  31:./../libcmsis/core_cm3.h **** 
  32:./../libcmsis/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  33:./../libcmsis/core_cm3.h **** 
  34:./../libcmsis/core_cm3.h **** /**
  35:./../libcmsis/core_cm3.h ****  *  Lint configuration \n
  36:./../libcmsis/core_cm3.h ****  *  ----------------------- \n
  37:./../libcmsis/core_cm3.h ****  *
  38:./../libcmsis/core_cm3.h ****  *  The following Lint messages will be suppressed and not shown: \n
  39:./../libcmsis/core_cm3.h ****  *  \n
  40:./../libcmsis/core_cm3.h ****  *    --- Error 10: --- \n
  41:./../libcmsis/core_cm3.h ****  *    register uint32_t __regBasePri         __asm("basepri"); \n
  42:./../libcmsis/core_cm3.h ****  *    Error 10: Expecting ';' \n
  43:./../libcmsis/core_cm3.h ****  *     \n
  44:./../libcmsis/core_cm3.h ****  *    --- Error 530: --- \n
  45:./../libcmsis/core_cm3.h ****  *    return(__regBasePri); \n
  46:./../libcmsis/core_cm3.h ****  *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
  47:./../libcmsis/core_cm3.h ****  *     \n
  48:./../libcmsis/core_cm3.h ****  *    --- Error 550: --- \n
  49:./../libcmsis/core_cm3.h ****  *      __regBasePri = (basePri & 0x1ff); \n
  50:./../libcmsis/core_cm3.h ****  *    } \n
  51:./../libcmsis/core_cm3.h ****  *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
  52:./../libcmsis/core_cm3.h ****  *     \n
  53:./../libcmsis/core_cm3.h ****  *    --- Error 754: --- \n
  54:./../libcmsis/core_cm3.h ****  *    uint32_t RESERVED0[24]; \n
  55:./../libcmsis/core_cm3.h ****  *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) 
  56:./../libcmsis/core_cm3.h ****  *     \n
  57:./../libcmsis/core_cm3.h ****  *    --- Error 750: --- \n
  58:./../libcmsis/core_cm3.h ****  *    #define __CM3_CORE_H__ \n
  59:./../libcmsis/core_cm3.h ****  *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
  60:./../libcmsis/core_cm3.h ****  *     \n
  61:./../libcmsis/core_cm3.h ****  *    --- Error 528: --- \n
  62:./../libcmsis/core_cm3.h ****  *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  63:./../libcmsis/core_cm3.h ****  *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referen
  64:./../libcmsis/core_cm3.h ****  *     \n
  65:./../libcmsis/core_cm3.h ****  *    --- Error 751: --- \n
  66:./../libcmsis/core_cm3.h ****  *    } InterruptType_Type; \n
  67:./../libcmsis/core_cm3.h ****  *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
  68:./../libcmsis/core_cm3.h ****  * \n
  69:./../libcmsis/core_cm3.h ****  * \n
  70:./../libcmsis/core_cm3.h ****  *    Note:  To re-enable a Message, insert a space before 'lint' * \n
  71:./../libcmsis/core_cm3.h ****  *
  72:./../libcmsis/core_cm3.h ****  */
  73:./../libcmsis/core_cm3.h **** 
  74:./../libcmsis/core_cm3.h **** /*lint -save */
  75:./../libcmsis/core_cm3.h **** /*lint -e10  */
  76:./../libcmsis/core_cm3.h **** /*lint -e530 */
  77:./../libcmsis/core_cm3.h **** /*lint -e550 */
  78:./../libcmsis/core_cm3.h **** /*lint -e754 */
  79:./../libcmsis/core_cm3.h **** /*lint -e750 */
  80:./../libcmsis/core_cm3.h **** /*lint -e528 */
  81:./../libcmsis/core_cm3.h **** /*lint -e751 */
  82:./../libcmsis/core_cm3.h **** 
  83:./../libcmsis/core_cm3.h **** 
  84:./../libcmsis/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  85:./../libcmsis/core_cm3.h **** 
  86:./../libcmsis/core_cm3.h **** #if defined (__ICCARM__)
  87:./../libcmsis/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  88:./../libcmsis/core_cm3.h **** #endif
  89:./../libcmsis/core_cm3.h **** 
  90:./../libcmsis/core_cm3.h **** 
  91:./../libcmsis/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  92:./../libcmsis/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  93:./../libcmsis/core_cm3.h **** #endif
  94:./../libcmsis/core_cm3.h **** 
  95:./../libcmsis/core_cm3.h **** 
  96:./../libcmsis/core_cm3.h **** 
  97:./../libcmsis/core_cm3.h **** 
  98:./../libcmsis/core_cm3.h **** /**
  99:./../libcmsis/core_cm3.h ****  * IO definitions
 100:./../libcmsis/core_cm3.h ****  *
 101:./../libcmsis/core_cm3.h ****  * define access restrictions to peripheral registers
 102:./../libcmsis/core_cm3.h ****  */
 103:./../libcmsis/core_cm3.h **** 
 104:./../libcmsis/core_cm3.h **** #ifdef __cplusplus
 105:./../libcmsis/core_cm3.h **** #define     __I     volatile                  /*!< defines 'read only' permissions      */
 106:./../libcmsis/core_cm3.h **** #else
 107:./../libcmsis/core_cm3.h **** #define     __I     volatile const            /*!< defines 'read only' permissions      */
 108:./../libcmsis/core_cm3.h **** #endif
 109:./../libcmsis/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 110:./../libcmsis/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 111:./../libcmsis/core_cm3.h **** 
 112:./../libcmsis/core_cm3.h **** 
 113:./../libcmsis/core_cm3.h **** 
 114:./../libcmsis/core_cm3.h **** /*******************************************************************************
 115:./../libcmsis/core_cm3.h ****  *                 Register Abstraction
 116:./../libcmsis/core_cm3.h ****  ******************************************************************************/
 117:./../libcmsis/core_cm3.h **** 
 118:./../libcmsis/core_cm3.h **** 
 119:./../libcmsis/core_cm3.h **** /* System Reset */
 120:./../libcmsis/core_cm3.h **** #define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
 121:./../libcmsis/core_cm3.h **** #define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
 122:./../libcmsis/core_cm3.h **** #define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
 123:./../libcmsis/core_cm3.h **** #define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
 124:./../libcmsis/core_cm3.h **** 
 125:./../libcmsis/core_cm3.h **** /* Core Debug */
 126:./../libcmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
 127:./../libcmsis/core_cm3.h **** #define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
 128:./../libcmsis/core_cm3.h **** 
 129:./../libcmsis/core_cm3.h **** 
 130:./../libcmsis/core_cm3.h **** 
 131:./../libcmsis/core_cm3.h **** 
 132:./../libcmsis/core_cm3.h **** /* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
 133:./../libcmsis/core_cm3.h **** typedef struct
 134:./../libcmsis/core_cm3.h **** {
 135:./../libcmsis/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
 136:./../libcmsis/core_cm3.h ****        uint32_t RESERVED0[24];
 137:./../libcmsis/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
 138:./../libcmsis/core_cm3.h ****        uint32_t RSERVED1[24];
 139:./../libcmsis/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
 140:./../libcmsis/core_cm3.h ****        uint32_t RESERVED2[24];
 141:./../libcmsis/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
 142:./../libcmsis/core_cm3.h ****        uint32_t RESERVED3[24];
 143:./../libcmsis/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
 144:./../libcmsis/core_cm3.h ****        uint32_t RESERVED4[56];
 145:./../libcmsis/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
 146:./../libcmsis/core_cm3.h ****        uint32_t RESERVED5[644];
 147:./../libcmsis/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
 148:./../libcmsis/core_cm3.h **** }  NVIC_Type;
 149:./../libcmsis/core_cm3.h **** 
 150:./../libcmsis/core_cm3.h **** 
 151:./../libcmsis/core_cm3.h **** /* memory mapping struct for System Control Block */
 152:./../libcmsis/core_cm3.h **** typedef struct
 153:./../libcmsis/core_cm3.h **** {
 154:./../libcmsis/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< CPU ID Base Register                            
 155:./../libcmsis/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                
 156:./../libcmsis/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                    
 157:./../libcmsis/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register  
 158:./../libcmsis/core_cm3.h ****   __IO uint32_t SCR;                          /*!< System Control Register                         
 159:./../libcmsis/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Configuration Control Register                  
 160:./../libcmsis/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 1
 161:./../libcmsis/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register       
 162:./../libcmsis/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register              
 163:./../libcmsis/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                      
 164:./../libcmsis/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                     
 165:./../libcmsis/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                     
 166:./../libcmsis/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                      
 167:./../libcmsis/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                 
 168:./../libcmsis/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Processor Feature Register                      
 169:./../libcmsis/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Debug Feature Register                          
 170:./../libcmsis/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                      
 171:./../libcmsis/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                   
 172:./../libcmsis/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                            
 173:./../libcmsis/core_cm3.h **** } SCB_Type;
 174:./../libcmsis/core_cm3.h **** 
 175:./../libcmsis/core_cm3.h **** 
 176:./../libcmsis/core_cm3.h **** /* memory mapping struct for SysTick */
 177:./../libcmsis/core_cm3.h **** typedef struct
 178:./../libcmsis/core_cm3.h **** {
 179:./../libcmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
 180:./../libcmsis/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
 181:./../libcmsis/core_cm3.h ****   __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
 182:./../libcmsis/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
 183:./../libcmsis/core_cm3.h **** } SysTick_Type;
 184:./../libcmsis/core_cm3.h **** 
 185:./../libcmsis/core_cm3.h **** 
 186:./../libcmsis/core_cm3.h **** /* memory mapping structur for ITM */
 187:./../libcmsis/core_cm3.h **** typedef struct
 188:./../libcmsis/core_cm3.h **** {
 189:./../libcmsis/core_cm3.h ****   __O  union  
 190:./../libcmsis/core_cm3.h ****   {
 191:./../libcmsis/core_cm3.h ****     __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
 192:./../libcmsis/core_cm3.h ****     __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
 193:./../libcmsis/core_cm3.h ****     __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
 194:./../libcmsis/core_cm3.h ****   }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
 195:./../libcmsis/core_cm3.h ****        uint32_t RESERVED0[864];
 196:./../libcmsis/core_cm3.h ****   __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
 197:./../libcmsis/core_cm3.h ****        uint32_t RESERVED1[15];
 198:./../libcmsis/core_cm3.h ****   __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
 199:./../libcmsis/core_cm3.h ****        uint32_t RESERVED2[15];
 200:./../libcmsis/core_cm3.h ****   __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
 201:./../libcmsis/core_cm3.h ****        uint32_t RESERVED3[29];
 202:./../libcmsis/core_cm3.h ****   __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
 203:./../libcmsis/core_cm3.h ****   __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
 204:./../libcmsis/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
 205:./../libcmsis/core_cm3.h ****        uint32_t RESERVED4[43];
 206:./../libcmsis/core_cm3.h ****   __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
 207:./../libcmsis/core_cm3.h ****   __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
 208:./../libcmsis/core_cm3.h ****        uint32_t RESERVED5[6];
 209:./../libcmsis/core_cm3.h ****   __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
 210:./../libcmsis/core_cm3.h ****   __I  uint32_t PID5;
 211:./../libcmsis/core_cm3.h ****   __I  uint32_t PID6;
 212:./../libcmsis/core_cm3.h ****   __I  uint32_t PID7;
 213:./../libcmsis/core_cm3.h ****   __I  uint32_t PID0;
 214:./../libcmsis/core_cm3.h ****   __I  uint32_t PID1;
 215:./../libcmsis/core_cm3.h ****   __I  uint32_t PID2;
 216:./../libcmsis/core_cm3.h ****   __I  uint32_t PID3;
 217:./../libcmsis/core_cm3.h ****   __I  uint32_t CID0;
 218:./../libcmsis/core_cm3.h ****   __I  uint32_t CID1;
 219:./../libcmsis/core_cm3.h ****   __I  uint32_t CID2;
 220:./../libcmsis/core_cm3.h ****   __I  uint32_t CID3;
 221:./../libcmsis/core_cm3.h **** } ITM_Type;
 222:./../libcmsis/core_cm3.h **** 
 223:./../libcmsis/core_cm3.h **** 
 224:./../libcmsis/core_cm3.h **** /* memory mapped struct for Interrupt Type */
 225:./../libcmsis/core_cm3.h **** typedef struct
 226:./../libcmsis/core_cm3.h **** {
 227:./../libcmsis/core_cm3.h ****        uint32_t RESERVED0;
 228:./../libcmsis/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
 229:./../libcmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 230:./../libcmsis/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
 231:./../libcmsis/core_cm3.h **** #else
 232:./../libcmsis/core_cm3.h ****        uint32_t RESERVED1;
 233:./../libcmsis/core_cm3.h **** #endif
 234:./../libcmsis/core_cm3.h **** } InterruptType_Type;
 235:./../libcmsis/core_cm3.h **** 
 236:./../libcmsis/core_cm3.h **** 
 237:./../libcmsis/core_cm3.h **** /* Memory Protection Unit */
 238:./../libcmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 239:./../libcmsis/core_cm3.h **** typedef struct
 240:./../libcmsis/core_cm3.h **** {
 241:./../libcmsis/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< MPU Type Register                               
 242:./../libcmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< MPU Control Register                            
 243:./../libcmsis/core_cm3.h ****   __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      
 244:./../libcmsis/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                
 245:./../libcmsis/core_cm3.h ****   __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          
 246:./../libcmsis/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        
 247:./../libcmsis/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  
 248:./../libcmsis/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        
 249:./../libcmsis/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  
 250:./../libcmsis/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        
 251:./../libcmsis/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  
 252:./../libcmsis/core_cm3.h **** } MPU_Type;
 253:./../libcmsis/core_cm3.h **** #endif
 254:./../libcmsis/core_cm3.h **** 
 255:./../libcmsis/core_cm3.h **** 
 256:./../libcmsis/core_cm3.h **** /* Core Debug Register */
 257:./../libcmsis/core_cm3.h **** typedef struct
 258:./../libcmsis/core_cm3.h **** {
 259:./../libcmsis/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       
 260:./../libcmsis/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           
 261:./../libcmsis/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               
 262:./../libcmsis/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    
 263:./../libcmsis/core_cm3.h **** } CoreDebug_Type;
 264:./../libcmsis/core_cm3.h **** 
 265:./../libcmsis/core_cm3.h **** 
 266:./../libcmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 267:./../libcmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 268:./../libcmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 269:./../libcmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 270:./../libcmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 271:./../libcmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 272:./../libcmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 273:./../libcmsis/core_cm3.h **** 
 274:./../libcmsis/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 275:./../libcmsis/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 276:./../libcmsis/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 277:./../libcmsis/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 278:./../libcmsis/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 279:./../libcmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 280:./../libcmsis/core_cm3.h **** 
 281:./../libcmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 282:./../libcmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 283:./../libcmsis/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 284:./../libcmsis/core_cm3.h **** #endif
 285:./../libcmsis/core_cm3.h **** 
 286:./../libcmsis/core_cm3.h **** 
 287:./../libcmsis/core_cm3.h **** 
 288:./../libcmsis/core_cm3.h **** /*******************************************************************************
 289:./../libcmsis/core_cm3.h ****  *                Hardware Abstraction Layer
 290:./../libcmsis/core_cm3.h ****  ******************************************************************************/
 291:./../libcmsis/core_cm3.h **** 
 292:./../libcmsis/core_cm3.h **** 
 293:./../libcmsis/core_cm3.h **** #if defined ( __CC_ARM   )
 294:./../libcmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 295:./../libcmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 296:./../libcmsis/core_cm3.h **** 
 297:./../libcmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 298:./../libcmsis/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 299:./../libcmsis/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 300:./../libcmsis/core_cm3.h **** 
 301:./../libcmsis/core_cm3.h **** #elif defined   (  __GNUC__  )
 302:./../libcmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 303:./../libcmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 304:./../libcmsis/core_cm3.h **** 
 305:./../libcmsis/core_cm3.h **** #elif defined   (  __TASKING__  )
 306:./../libcmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 307:./../libcmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 308:./../libcmsis/core_cm3.h **** 
 309:./../libcmsis/core_cm3.h **** #endif
 310:./../libcmsis/core_cm3.h **** 
 311:./../libcmsis/core_cm3.h **** 
 312:./../libcmsis/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 313:./../libcmsis/core_cm3.h **** 
 314:./../libcmsis/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 315:./../libcmsis/core_cm3.h **** /* ARM armcc specific functions */
 316:./../libcmsis/core_cm3.h **** 
 317:./../libcmsis/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 318:./../libcmsis/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 319:./../libcmsis/core_cm3.h **** 
 320:./../libcmsis/core_cm3.h **** #define __NOP                             __nop
 321:./../libcmsis/core_cm3.h **** #define __WFI                             __wfi
 322:./../libcmsis/core_cm3.h **** #define __WFE                             __wfe
 323:./../libcmsis/core_cm3.h **** #define __SEV                             __sev
 324:./../libcmsis/core_cm3.h **** #define __ISB()                           __isb(0)
 325:./../libcmsis/core_cm3.h **** #define __DSB()                           __dsb(0)
 326:./../libcmsis/core_cm3.h **** #define __DMB()                           __dmb(0)
 327:./../libcmsis/core_cm3.h **** #define __REV                             __rev
 328:./../libcmsis/core_cm3.h **** #define __RBIT                            __rbit
 329:./../libcmsis/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 330:./../libcmsis/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 331:./../libcmsis/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 332:./../libcmsis/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 333:./../libcmsis/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 334:./../libcmsis/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 335:./../libcmsis/core_cm3.h **** 
 336:./../libcmsis/core_cm3.h **** 
 337:./../libcmsis/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 338:./../libcmsis/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 339:./../libcmsis/core_cm3.h **** /* intrinsic void __enable_irq();     */
 340:./../libcmsis/core_cm3.h **** /* intrinsic void __disable_irq();    */
 341:./../libcmsis/core_cm3.h **** 
 342:./../libcmsis/core_cm3.h **** 
 343:./../libcmsis/core_cm3.h **** /**
 344:./../libcmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 345:./../libcmsis/core_cm3.h ****  *
 346:./../libcmsis/core_cm3.h ****  * @param  none
 347:./../libcmsis/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 348:./../libcmsis/core_cm3.h ****  *
 349:./../libcmsis/core_cm3.h ****  * Return the actual process stack pointer
 350:./../libcmsis/core_cm3.h ****  */
 351:./../libcmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
 352:./../libcmsis/core_cm3.h **** 
 353:./../libcmsis/core_cm3.h **** /**
 354:./../libcmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 355:./../libcmsis/core_cm3.h ****  *
 356:./../libcmsis/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 357:./../libcmsis/core_cm3.h ****  * @return none
 358:./../libcmsis/core_cm3.h ****  *
 359:./../libcmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 360:./../libcmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
 361:./../libcmsis/core_cm3.h ****  */
 362:./../libcmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 363:./../libcmsis/core_cm3.h **** 
 364:./../libcmsis/core_cm3.h **** /**
 365:./../libcmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 366:./../libcmsis/core_cm3.h ****  *
 367:./../libcmsis/core_cm3.h ****  * @param  none
 368:./../libcmsis/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 369:./../libcmsis/core_cm3.h ****  *
 370:./../libcmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 371:./../libcmsis/core_cm3.h ****  * Cortex processor register
 372:./../libcmsis/core_cm3.h ****  */
 373:./../libcmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
 374:./../libcmsis/core_cm3.h **** 
 375:./../libcmsis/core_cm3.h **** /**
 376:./../libcmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 377:./../libcmsis/core_cm3.h ****  *
 378:./../libcmsis/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 379:./../libcmsis/core_cm3.h ****  * @return none
 380:./../libcmsis/core_cm3.h ****  *
 381:./../libcmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 382:./../libcmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
 383:./../libcmsis/core_cm3.h ****  */
 384:./../libcmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 385:./../libcmsis/core_cm3.h **** 
 386:./../libcmsis/core_cm3.h **** /**
 387:./../libcmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 388:./../libcmsis/core_cm3.h ****  *
 389:./../libcmsis/core_cm3.h ****  * @param  uint16_t value to reverse
 390:./../libcmsis/core_cm3.h ****  * @return uint32_t reversed value
 391:./../libcmsis/core_cm3.h ****  *
 392:./../libcmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
 393:./../libcmsis/core_cm3.h ****  */
 394:./../libcmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 395:./../libcmsis/core_cm3.h **** 
 396:./../libcmsis/core_cm3.h **** /*
 397:./../libcmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 398:./../libcmsis/core_cm3.h ****  *
 399:./../libcmsis/core_cm3.h ****  * @param  int16_t value to reverse
 400:./../libcmsis/core_cm3.h ****  * @return int32_t reversed value
 401:./../libcmsis/core_cm3.h ****  *
 402:./../libcmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 403:./../libcmsis/core_cm3.h ****  */
 404:./../libcmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 405:./../libcmsis/core_cm3.h **** 
 406:./../libcmsis/core_cm3.h **** 
 407:./../libcmsis/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 408:./../libcmsis/core_cm3.h **** 
 409:./../libcmsis/core_cm3.h **** /**
 410:./../libcmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 411:./../libcmsis/core_cm3.h ****  *
 412:./../libcmsis/core_cm3.h ****  * @param  none
 413:./../libcmsis/core_cm3.h ****  * @return none
 414:./../libcmsis/core_cm3.h ****  *
 415:./../libcmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 416:./../libcmsis/core_cm3.h ****  */
 417:./../libcmsis/core_cm3.h **** extern void __CLREX(void);
 418:./../libcmsis/core_cm3.h **** 
 419:./../libcmsis/core_cm3.h **** /**
 420:./../libcmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 421:./../libcmsis/core_cm3.h ****  *
 422:./../libcmsis/core_cm3.h ****  * @param  none
 423:./../libcmsis/core_cm3.h ****  * @return uint32_t BasePriority
 424:./../libcmsis/core_cm3.h ****  *
 425:./../libcmsis/core_cm3.h ****  * Return the content of the base priority register
 426:./../libcmsis/core_cm3.h ****  */
 427:./../libcmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 428:./../libcmsis/core_cm3.h **** 
 429:./../libcmsis/core_cm3.h **** /**
 430:./../libcmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 431:./../libcmsis/core_cm3.h ****  *
 432:./../libcmsis/core_cm3.h ****  * @param  uint32_t BasePriority
 433:./../libcmsis/core_cm3.h ****  * @return none
 434:./../libcmsis/core_cm3.h ****  *
 435:./../libcmsis/core_cm3.h ****  * Set the base priority register
 436:./../libcmsis/core_cm3.h ****  */
 437:./../libcmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 438:./../libcmsis/core_cm3.h **** 
 439:./../libcmsis/core_cm3.h **** /**
 440:./../libcmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 441:./../libcmsis/core_cm3.h ****  *
 442:./../libcmsis/core_cm3.h ****  * @param  none
 443:./../libcmsis/core_cm3.h ****  * @return uint32_t PriMask
 444:./../libcmsis/core_cm3.h ****  *
 445:./../libcmsis/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 446:./../libcmsis/core_cm3.h ****  * register
 447:./../libcmsis/core_cm3.h ****  */
 448:./../libcmsis/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 449:./../libcmsis/core_cm3.h **** 
 450:./../libcmsis/core_cm3.h **** /**
 451:./../libcmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 452:./../libcmsis/core_cm3.h ****  *
 453:./../libcmsis/core_cm3.h ****  * @param  uint32_t PriMask
 454:./../libcmsis/core_cm3.h ****  * @return none
 455:./../libcmsis/core_cm3.h ****  *
 456:./../libcmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 457:./../libcmsis/core_cm3.h ****  */
 458:./../libcmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 459:./../libcmsis/core_cm3.h **** 
 460:./../libcmsis/core_cm3.h **** /**
 461:./../libcmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 462:./../libcmsis/core_cm3.h ****  *
 463:./../libcmsis/core_cm3.h ****  * @param  none
 464:./../libcmsis/core_cm3.h ****  * @return uint32_t FaultMask
 465:./../libcmsis/core_cm3.h ****  *
 466:./../libcmsis/core_cm3.h ****  * Return the content of the fault mask register
 467:./../libcmsis/core_cm3.h ****  */
 468:./../libcmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 469:./../libcmsis/core_cm3.h **** 
 470:./../libcmsis/core_cm3.h **** /**
 471:./../libcmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
 472:./../libcmsis/core_cm3.h ****  *
 473:./../libcmsis/core_cm3.h ****  * @param  uint32_t faultMask value
 474:./../libcmsis/core_cm3.h ****  * @return none
 475:./../libcmsis/core_cm3.h ****  *
 476:./../libcmsis/core_cm3.h ****  * Set the fault mask register
 477:./../libcmsis/core_cm3.h ****  */
 478:./../libcmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 479:./../libcmsis/core_cm3.h **** 
 480:./../libcmsis/core_cm3.h **** /**
 481:./../libcmsis/core_cm3.h ****  * @brief  Return the Control Register value
 482:./../libcmsis/core_cm3.h ****  * 
 483:./../libcmsis/core_cm3.h ****  * @param  none
 484:./../libcmsis/core_cm3.h ****  * @return uint32_t Control value
 485:./../libcmsis/core_cm3.h ****  *
 486:./../libcmsis/core_cm3.h ****  * Return the content of the control register
 487:./../libcmsis/core_cm3.h ****  */
 488:./../libcmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 489:./../libcmsis/core_cm3.h **** 
 490:./../libcmsis/core_cm3.h **** /**
 491:./../libcmsis/core_cm3.h ****  * @brief  Set the Control Register value
 492:./../libcmsis/core_cm3.h ****  *
 493:./../libcmsis/core_cm3.h ****  * @param  uint32_t Control value
 494:./../libcmsis/core_cm3.h ****  * @return none
 495:./../libcmsis/core_cm3.h ****  *
 496:./../libcmsis/core_cm3.h ****  * Set the control register
 497:./../libcmsis/core_cm3.h ****  */
 498:./../libcmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 499:./../libcmsis/core_cm3.h **** 
 500:./../libcmsis/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 501:./../libcmsis/core_cm3.h **** 
 502:./../libcmsis/core_cm3.h **** 
 503:./../libcmsis/core_cm3.h **** /**
 504:./../libcmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 505:./../libcmsis/core_cm3.h ****  *
 506:./../libcmsis/core_cm3.h ****  * @param  none
 507:./../libcmsis/core_cm3.h ****  * @return none
 508:./../libcmsis/core_cm3.h ****  *
 509:./../libcmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 510:./../libcmsis/core_cm3.h ****  */
 511:./../libcmsis/core_cm3.h **** #define __CLREX                           __clrex
 512:./../libcmsis/core_cm3.h **** 
 513:./../libcmsis/core_cm3.h **** /**
 514:./../libcmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 515:./../libcmsis/core_cm3.h ****  *
 516:./../libcmsis/core_cm3.h ****  * @param  none
 517:./../libcmsis/core_cm3.h ****  * @return uint32_t BasePriority
 518:./../libcmsis/core_cm3.h ****  *
 519:./../libcmsis/core_cm3.h ****  * Return the content of the base priority register
 520:./../libcmsis/core_cm3.h ****  */
 521:./../libcmsis/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 522:./../libcmsis/core_cm3.h **** {
 523:./../libcmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 524:./../libcmsis/core_cm3.h ****   return(__regBasePri);
 525:./../libcmsis/core_cm3.h **** }
 526:./../libcmsis/core_cm3.h **** 
 527:./../libcmsis/core_cm3.h **** /**
 528:./../libcmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 529:./../libcmsis/core_cm3.h ****  *
 530:./../libcmsis/core_cm3.h ****  * @param  uint32_t BasePriority
 531:./../libcmsis/core_cm3.h ****  * @return none
 532:./../libcmsis/core_cm3.h ****  *
 533:./../libcmsis/core_cm3.h ****  * Set the base priority register
 534:./../libcmsis/core_cm3.h ****  */
 535:./../libcmsis/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 536:./../libcmsis/core_cm3.h **** {
 537:./../libcmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 538:./../libcmsis/core_cm3.h ****   __regBasePri = (basePri & 0x1ff);
 539:./../libcmsis/core_cm3.h **** }
 540:./../libcmsis/core_cm3.h **** 
 541:./../libcmsis/core_cm3.h **** /**
 542:./../libcmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 543:./../libcmsis/core_cm3.h ****  *
 544:./../libcmsis/core_cm3.h ****  * @param  none
 545:./../libcmsis/core_cm3.h ****  * @return uint32_t PriMask
 546:./../libcmsis/core_cm3.h ****  *
 547:./../libcmsis/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 548:./../libcmsis/core_cm3.h ****  * register
 549:./../libcmsis/core_cm3.h ****  */
 550:./../libcmsis/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 551:./../libcmsis/core_cm3.h **** {
 552:./../libcmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 553:./../libcmsis/core_cm3.h ****   return(__regPriMask);
 554:./../libcmsis/core_cm3.h **** }
 555:./../libcmsis/core_cm3.h **** 
 556:./../libcmsis/core_cm3.h **** /**
 557:./../libcmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 558:./../libcmsis/core_cm3.h ****  *
 559:./../libcmsis/core_cm3.h ****  * @param  uint32_t PriMask
 560:./../libcmsis/core_cm3.h ****  * @return none
 561:./../libcmsis/core_cm3.h ****  *
 562:./../libcmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 563:./../libcmsis/core_cm3.h ****  */
 564:./../libcmsis/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 565:./../libcmsis/core_cm3.h **** {
 566:./../libcmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 567:./../libcmsis/core_cm3.h ****   __regPriMask = (priMask);
 568:./../libcmsis/core_cm3.h **** }
 569:./../libcmsis/core_cm3.h **** 
 570:./../libcmsis/core_cm3.h **** /**
 571:./../libcmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 572:./../libcmsis/core_cm3.h ****  *
 573:./../libcmsis/core_cm3.h ****  * @param  none
 574:./../libcmsis/core_cm3.h ****  * @return uint32_t FaultMask
 575:./../libcmsis/core_cm3.h ****  *
 576:./../libcmsis/core_cm3.h ****  * Return the content of the fault mask register
 577:./../libcmsis/core_cm3.h ****  */
 578:./../libcmsis/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 579:./../libcmsis/core_cm3.h **** {
 580:./../libcmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 581:./../libcmsis/core_cm3.h ****   return(__regFaultMask);
 582:./../libcmsis/core_cm3.h **** }
 583:./../libcmsis/core_cm3.h **** 
 584:./../libcmsis/core_cm3.h **** /**
 585:./../libcmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
 586:./../libcmsis/core_cm3.h ****  *
 587:./../libcmsis/core_cm3.h ****  * @param  uint32_t faultMask value
 588:./../libcmsis/core_cm3.h ****  * @return none
 589:./../libcmsis/core_cm3.h ****  *
 590:./../libcmsis/core_cm3.h ****  * Set the fault mask register
 591:./../libcmsis/core_cm3.h ****  */
 592:./../libcmsis/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 593:./../libcmsis/core_cm3.h **** {
 594:./../libcmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 595:./../libcmsis/core_cm3.h ****   __regFaultMask = (faultMask & 1);
 596:./../libcmsis/core_cm3.h **** }
 597:./../libcmsis/core_cm3.h **** 
 598:./../libcmsis/core_cm3.h **** /**
 599:./../libcmsis/core_cm3.h ****  * @brief  Return the Control Register value
 600:./../libcmsis/core_cm3.h ****  * 
 601:./../libcmsis/core_cm3.h ****  * @param  none
 602:./../libcmsis/core_cm3.h ****  * @return uint32_t Control value
 603:./../libcmsis/core_cm3.h ****  *
 604:./../libcmsis/core_cm3.h ****  * Return the content of the control register
 605:./../libcmsis/core_cm3.h ****  */
 606:./../libcmsis/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
 607:./../libcmsis/core_cm3.h **** {
 608:./../libcmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 609:./../libcmsis/core_cm3.h ****   return(__regControl);
 610:./../libcmsis/core_cm3.h **** }
 611:./../libcmsis/core_cm3.h **** 
 612:./../libcmsis/core_cm3.h **** /**
 613:./../libcmsis/core_cm3.h ****  * @brief  Set the Control Register value
 614:./../libcmsis/core_cm3.h ****  *
 615:./../libcmsis/core_cm3.h ****  * @param  uint32_t Control value
 616:./../libcmsis/core_cm3.h ****  * @return none
 617:./../libcmsis/core_cm3.h ****  *
 618:./../libcmsis/core_cm3.h ****  * Set the control register
 619:./../libcmsis/core_cm3.h ****  */
 620:./../libcmsis/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
 621:./../libcmsis/core_cm3.h **** {
 622:./../libcmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 623:./../libcmsis/core_cm3.h ****   __regControl = control;
 624:./../libcmsis/core_cm3.h **** }
 625:./../libcmsis/core_cm3.h **** 
 626:./../libcmsis/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
 627:./../libcmsis/core_cm3.h **** 
 628:./../libcmsis/core_cm3.h **** 
 629:./../libcmsis/core_cm3.h **** 
 630:./../libcmsis/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 631:./../libcmsis/core_cm3.h **** /* IAR iccarm specific functions */
 632:./../libcmsis/core_cm3.h **** 
 633:./../libcmsis/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 634:./../libcmsis/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 635:./../libcmsis/core_cm3.h **** 
 636:./../libcmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 637:./../libcmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 638:./../libcmsis/core_cm3.h **** 
 639:./../libcmsis/core_cm3.h **** #define __NOP                                     __no_operation()          /*!< no operation intri
 640:./../libcmsis/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 641:./../libcmsis/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 642:./../libcmsis/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 643:./../libcmsis/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
 644:./../libcmsis/core_cm3.h **** 
 645:./../libcmsis/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
 646:./../libcmsis/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
 647:./../libcmsis/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
 648:./../libcmsis/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
 649:./../libcmsis/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
 650:./../libcmsis/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
 651:./../libcmsis/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
 652:./../libcmsis/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 653:./../libcmsis/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 654:./../libcmsis/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
 655:./../libcmsis/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
 656:./../libcmsis/core_cm3.h **** 
 657:./../libcmsis/core_cm3.h **** 
 658:./../libcmsis/core_cm3.h **** /**
 659:./../libcmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 660:./../libcmsis/core_cm3.h ****  *
 661:./../libcmsis/core_cm3.h ****  * @param  none
 662:./../libcmsis/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 663:./../libcmsis/core_cm3.h ****  *
 664:./../libcmsis/core_cm3.h ****  * Return the actual process stack pointer
 665:./../libcmsis/core_cm3.h ****  */
 666:./../libcmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
 667:./../libcmsis/core_cm3.h **** 
 668:./../libcmsis/core_cm3.h **** /**
 669:./../libcmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 670:./../libcmsis/core_cm3.h ****  *
 671:./../libcmsis/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 672:./../libcmsis/core_cm3.h ****  * @return none
 673:./../libcmsis/core_cm3.h ****  *
 674:./../libcmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 675:./../libcmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
 676:./../libcmsis/core_cm3.h ****  */
 677:./../libcmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 678:./../libcmsis/core_cm3.h **** 
 679:./../libcmsis/core_cm3.h **** /**
 680:./../libcmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 681:./../libcmsis/core_cm3.h ****  *
 682:./../libcmsis/core_cm3.h ****  * @param  none
 683:./../libcmsis/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 684:./../libcmsis/core_cm3.h ****  *
 685:./../libcmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 686:./../libcmsis/core_cm3.h ****  * Cortex processor register
 687:./../libcmsis/core_cm3.h ****  */
 688:./../libcmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
 689:./../libcmsis/core_cm3.h **** 
 690:./../libcmsis/core_cm3.h **** /**
 691:./../libcmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 692:./../libcmsis/core_cm3.h ****  *
 693:./../libcmsis/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 694:./../libcmsis/core_cm3.h ****  * @return none
 695:./../libcmsis/core_cm3.h ****  *
 696:./../libcmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 697:./../libcmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
 698:./../libcmsis/core_cm3.h ****  */
 699:./../libcmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 700:./../libcmsis/core_cm3.h **** 
 701:./../libcmsis/core_cm3.h **** /**
 702:./../libcmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 703:./../libcmsis/core_cm3.h ****  *
 704:./../libcmsis/core_cm3.h ****  * @param  uint16_t value to reverse
 705:./../libcmsis/core_cm3.h ****  * @return uint32_t reversed value
 706:./../libcmsis/core_cm3.h ****  *
 707:./../libcmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
 708:./../libcmsis/core_cm3.h ****  */
 709:./../libcmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 710:./../libcmsis/core_cm3.h **** 
 711:./../libcmsis/core_cm3.h **** /**
 712:./../libcmsis/core_cm3.h ****  * @brief  Reverse bit order of value
 713:./../libcmsis/core_cm3.h ****  *
 714:./../libcmsis/core_cm3.h ****  * @param  uint32_t value to reverse
 715:./../libcmsis/core_cm3.h ****  * @return uint32_t reversed value
 716:./../libcmsis/core_cm3.h ****  *
 717:./../libcmsis/core_cm3.h ****  * Reverse bit order of value
 718:./../libcmsis/core_cm3.h ****  */
 719:./../libcmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 720:./../libcmsis/core_cm3.h **** 
 721:./../libcmsis/core_cm3.h **** /**
 722:./../libcmsis/core_cm3.h ****  * @brief  LDR Exclusive
 723:./../libcmsis/core_cm3.h ****  *
 724:./../libcmsis/core_cm3.h ****  * @param  uint8_t* address
 725:./../libcmsis/core_cm3.h ****  * @return uint8_t value of (*address)
 726:./../libcmsis/core_cm3.h ****  *
 727:./../libcmsis/core_cm3.h ****  * Exclusive LDR command
 728:./../libcmsis/core_cm3.h ****  */
 729:./../libcmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 730:./../libcmsis/core_cm3.h **** 
 731:./../libcmsis/core_cm3.h **** /**
 732:./../libcmsis/core_cm3.h ****  * @brief  LDR Exclusive
 733:./../libcmsis/core_cm3.h ****  *
 734:./../libcmsis/core_cm3.h ****  * @param  uint16_t* address
 735:./../libcmsis/core_cm3.h ****  * @return uint16_t value of (*address)
 736:./../libcmsis/core_cm3.h ****  *
 737:./../libcmsis/core_cm3.h ****  * Exclusive LDR command
 738:./../libcmsis/core_cm3.h ****  */
 739:./../libcmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 740:./../libcmsis/core_cm3.h **** 
 741:./../libcmsis/core_cm3.h **** /**
 742:./../libcmsis/core_cm3.h ****  * @brief  LDR Exclusive
 743:./../libcmsis/core_cm3.h ****  *
 744:./../libcmsis/core_cm3.h ****  * @param  uint32_t* address
 745:./../libcmsis/core_cm3.h ****  * @return uint32_t value of (*address)
 746:./../libcmsis/core_cm3.h ****  *
 747:./../libcmsis/core_cm3.h ****  * Exclusive LDR command
 748:./../libcmsis/core_cm3.h ****  */
 749:./../libcmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 750:./../libcmsis/core_cm3.h **** 
 751:./../libcmsis/core_cm3.h **** /**
 752:./../libcmsis/core_cm3.h ****  * @brief  STR Exclusive
 753:./../libcmsis/core_cm3.h ****  *
 754:./../libcmsis/core_cm3.h ****  * @param  uint8_t *address
 755:./../libcmsis/core_cm3.h ****  * @param  uint8_t value to store
 756:./../libcmsis/core_cm3.h ****  * @return uint32_t successful / failed
 757:./../libcmsis/core_cm3.h ****  *
 758:./../libcmsis/core_cm3.h ****  * Exclusive STR command
 759:./../libcmsis/core_cm3.h ****  */
 760:./../libcmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
 761:./../libcmsis/core_cm3.h **** 
 762:./../libcmsis/core_cm3.h **** /**
 763:./../libcmsis/core_cm3.h ****  * @brief  STR Exclusive
 764:./../libcmsis/core_cm3.h ****  *
 765:./../libcmsis/core_cm3.h ****  * @param  uint16_t *address
 766:./../libcmsis/core_cm3.h ****  * @param  uint16_t value to store
 767:./../libcmsis/core_cm3.h ****  * @return uint32_t successful / failed
 768:./../libcmsis/core_cm3.h ****  *
 769:./../libcmsis/core_cm3.h ****  * Exclusive STR command
 770:./../libcmsis/core_cm3.h ****  */
 771:./../libcmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
 772:./../libcmsis/core_cm3.h **** 
 773:./../libcmsis/core_cm3.h **** /**
 774:./../libcmsis/core_cm3.h ****  * @brief  STR Exclusive
 775:./../libcmsis/core_cm3.h ****  *
 776:./../libcmsis/core_cm3.h ****  * @param  uint32_t *address
 777:./../libcmsis/core_cm3.h ****  * @param  uint32_t value to store
 778:./../libcmsis/core_cm3.h ****  * @return uint32_t successful / failed
 779:./../libcmsis/core_cm3.h ****  *
 780:./../libcmsis/core_cm3.h ****  * Exclusive STR command
 781:./../libcmsis/core_cm3.h ****  */
 782:./../libcmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
 783:./../libcmsis/core_cm3.h **** 
 784:./../libcmsis/core_cm3.h **** 
 785:./../libcmsis/core_cm3.h **** 
 786:./../libcmsis/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 787:./../libcmsis/core_cm3.h **** /* GNU gcc specific functions */
 788:./../libcmsis/core_cm3.h **** 
 789:./../libcmsis/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 790:./../libcmsis/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 791:./../libcmsis/core_cm3.h **** 
 792:./../libcmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 793:./../libcmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 794:./../libcmsis/core_cm3.h **** 
 795:./../libcmsis/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 19144              		.loc 19 796 0
 19145              	@ 796 "./../libcmsis/core_cm3.h" 1
 19146 0008 00BF     		nop
 19147              	@ 0 "" 2
 19148              		.thumb
 19149 000a 0138     		subs	r0, r0, #1
 19150              	.L2:
 19151              	.LBE7:
 19152              	.LBE6:
 19153              		.loc 1 7 0 discriminator 1
 19154 000c 0028     		cmp	r0, #0
 19155 000e FBD1     		bne	.L3
   7:main.c        **** 		__NOP();
   8:main.c        **** }
 19156              		.loc 1 9 0
 19157 0010 7047     		bx	lr
 19158              	.LFE27:
 19160              		.section	.text.delayUs,"ax",%progbits
 19161              		.align	1
 19162              		.global	delayUs
 19163              		.thumb
 19164              		.thumb_func
 19166              	delayUs:
 19167              	.LFB28:
   9:main.c        **** 
  10:main.c        **** void delayUs(uint32_t usec) {
 19168              		.loc 1 11 0
 19169              		@ args = 0, pretend = 0, frame = 0
 19170              		@ frame_needed = 0, uses_anonymous_args = 0
 19171              		@ link register save eliminated.
 19172              	.LVL4:
  11:main.c        **** 	uint32_t tmp = 7 * usec;
 19173              		.loc 1 12 0
 19174 0000 0723     		movs	r3, #7
 19175              	.LVL5:
 19176 0002 5843     		muls	r0, r3, r0
 19177              	.LVL6:
  12:main.c        **** 	while (tmp--)
 19178              		.loc 1 13 0
 19179 0004 01E0     		b	.L6
 19180              	.LVL7:
 19181              	.L7:
 19182              	.LBB8:
 19183              	.LBB9:
 19184              		.loc 19 796 0
 19185              	@ 796 "./../libcmsis/core_cm3.h" 1
 19186 0006 00BF     		nop
 19187              	@ 0 "" 2
 19188              		.thumb
 19189 0008 0138     		subs	r0, r0, #1
 19190              	.L6:
 19191              	.LBE9:
 19192              	.LBE8:
 19193              		.loc 1 13 0 discriminator 1
 19194 000a 0028     		cmp	r0, #0
 19195 000c FBD1     		bne	.L7
  13:main.c        **** 		__NOP();
  14:main.c        **** }
 19196              		.loc 1 15 0
 19197 000e 7047     		bx	lr
 19198              	.LFE28:
 19200              		.section	.text.main,"ax",%progbits
 19201              		.align	1
 19202              		.global	main
 19203              		.thumb
 19204              		.thumb_func
 19206              	main:
 19207              	.LFB29:
  15:main.c        **** 
  16:main.c        **** int main() {
 19208              		.loc 1 17 0
 19209              		@ args = 0, pretend = 0, frame = 0
 19210              		@ frame_needed = 0, uses_anonymous_args = 0
 19211 0000 08B5     		push	{r3, lr}
 19212              	.LCFI0:
  17:main.c        **** 	SystemStartup();
 19213              		.loc 1 18 0
 19214 0002 FFF7FEFF 		bl	SystemStartup
  18:main.c        **** #ifdef LED_ENABLE
  19:main.c        **** 	DBG_LED_PORT->BRR = DBG_LED_PIN;
 19215              		.loc 1 20 0
 19216 0006 0A4B     		ldr	r3, .L10
 19217 0008 4FF40052 		mov	r2, #8192
 19218 000c 5A61     		str	r2, [r3, #20]
  20:main.c        **** 	_torch_timeout = 1000;
 19219              		.loc 1 21 0
 19220 000e 094B     		ldr	r3, .L10+4
 19221 0010 4FF47A72 		mov	r2, #1000
 19222 0014 1A60     		str	r2, [r3, #0]
  21:main.c        **** #endif
  22:main.c        **** 	motors_PWM_init();
 19223              		.loc 1 23 0
 19224 0016 FFF7FEFF 		bl	motors_PWM_init
  23:main.c        **** 	spi_cmd_init();
 19225              		.loc 1 24 0
 19226 001a FFF7FEFF 		bl	spi_cmd_init
  24:main.c        **** 	battery_monitor_init();
 19227              		.loc 1 25 0
 19228 001e FFF7FEFF 		bl	battery_monitor_init
  25:main.c        **** 
  26:main.c        **** #ifdef USART1_ENABLE
  27:main.c        **** 	USART_init();
 19229              		.loc 1 28 0
 19230 0022 FFF7FEFF 		bl	USART_init
  28:main.c        **** 	USART_DBG_printf("start v1.0 %s\n", __TIMESTAMP__);
 19231              		.loc 1 29 0
 19232 0026 0448     		ldr	r0, .L10+8
 19233 0028 0449     		ldr	r1, .L10+12
 19234 002a FFF7FEFF 		bl	USART_DBG_printf
 19235              	.L9:
 19236 002e FEE7     		b	.L9
 19237              	.L11:
 19238              		.align	2
 19239              	.L10:
 19240 0030 00100140 		.word	1073811456
 19241 0034 00000000 		.word	_torch_timeout
 19242 0038 00000000 		.word	.LC0
 19243 003c 0F000000 		.word	.LC1
 19244              	.LFE29:
 19246              		.section	.rodata.str1.1,"aMS",%progbits,1
 19247              	.LC0:
 19248 0000 73746172 		.ascii	"start v1.0 %s\012\000"
 19248      74207631 
 19248      2E302025 
 19248      730A00
 19249              	.LC1:
 19250 000f 53617420 		.ascii	"Sat Sep 15 18:01:49 2018\000"
 19250      53657020 
 19250      31352031 
 19250      383A3031 
 19250      3A343920 
 19299              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19121  .text.delayMs:00000000 $t
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19126  .text.delayMs:00000000 delayMs
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19161  .text.delayUs:00000000 $t
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19166  .text.delayUs:00000000 delayUs
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19201  .text.main:00000000 $t
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19206  .text.main:00000000 main
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19240  .text.main:00000030 $d
C:\Users\ts\AppData\Local\Temp\cc9yqAKa.s:19264  .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemStartup
motors_PWM_init
spi_cmd_init
battery_monitor_init
USART_init
USART_DBG_printf
_torch_timeout
